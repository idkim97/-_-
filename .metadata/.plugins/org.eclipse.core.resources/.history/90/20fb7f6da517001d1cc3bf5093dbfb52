package calculate_Ver_Abstract;

import java.util.Scanner;
import java.util.StringTokenizer;

import lombok.Data;

@Data
public class Calculator extends CalAbstract{
	
	Scanner sc = new Scanner(System.in);
	
	// 더하기 연산 수행후 결과 return
	@Override
	public void add() {
		setSum(getSum()+getA());
		setResult(getSum());
	}

	// 빼기 연산 수행 후 결과 return
	@Override
	public void sub() {
		setSum(getSum()-getA());
		setResult(getSum());
	}

	// 곱하기 연산 수행 후 결과 return
	@Override
	public void mul() {
		setSum(getSum()*getA());
		setResult(getSum());
	}

	// 나누기 연산 수행 후 결과 return
	@Override
	public void div() {
		setSum(getSum()/getA());
		setResult(getSum());
	}
	
	// 연산기호가 무엇인지 판단하고 반환 객체
	@Override
	public char judgeOp(String op) {
		if (op.equals("+")) {
			return op.charAt(0);
		} else if (op.equals("-")) {
			return op.charAt(0);
		} else if (op.equals("*")) {
			return op.charAt(0);
		} else if (op.equals("/")) {
			return op.charAt(0);
		}
		return 'X';
	}
	
	
	
	
	
	// 실제 계산 수행
	public void calculate() {
		if (getOp().equals("+")) {
			add();
		} else if (getOp().equals("-")) {
			sub();
		} else if (getOp().equals("*")) {
			mul();
		} else if (getOp().equals("/")) {
			div();
		}
	}

	// 입력받은게 숫자인지 기호인지 판단하는 객체
	public boolean judgeCal(boolean temp) {
		if (temp == true)
			return true;
		else
			return false;
	}
	
	// 숫자면 true, 기호면 false return
	public boolean judgeNumOrOp(String temp) {
		return temp.matches("-?\\d+");
	}
	
	
	
	
	// 1번 계산기 ( 연속계산수행 )
	public void cal1() {
		while (true) {
			String str;
			str = sc.nextLine();

			StringTokenizer st = new StringTokenizer(str, "\\+|\\-|\\*|\\/", true);

			String temp = st.nextToken();
			if (temp.equals("=")) {
				/////////// 얘를 res.result()로 하면 왜안됨???
				System.out.println(sb.toString());
				System.out.println(getResult());
				sb.setLength(0);
				break;
			}

			// 첫번째 문자가 숫자인지 기호인지를 판단하는 코드
			// 숫자면 true, 기호면 false
			boolean IntOrNot = judgeNumOrOp(temp);

			// StringBuffer가 비어있는 경우
			if (sb.isEmpty()) {
				if (judgeCal(IntOrNot)) {
					int a = Integer.parseInt(temp);
					// a는 int형식으로 저장
					setA(a);
					
					// StringBuffer에 String형식으로 저장
					sb.append(temp);
					setSum(getSum()+a);
					setResult(getResult()+a);	
				} else {
					System.out.println("숫자를 입력하세요!");
					continue;
				}
			}

			// StringBuffer가 비어있지 않은 경우
			else {
				// 첫번째 문자가 숫자일경우 그대로 연산 진행
				// 숫자인경우(int)
				if (judgeCal(IntOrNot)) {
					int a = Integer.parseInt(temp);
					// a는 int형식으로 저장
					setA(a);

					// StringBuffer에 String형식으로 저장
					sb.append(temp);
					calculate();
				}

				// 첫번째 문자가 기호일 경우
				else if (!judgeCal(IntOrNot)) {
					String judgedOp = String.valueOf(judgeOp(temp));
					// judgedOp를 상위생성자에 넣어서 보내준다.
					setOp(judgedOp);
					
					// judgedOp를 Is_A_Cal의 StringBuffer에 넣어준다.
					sb.append(judgedOp);	
				}
			}
		}
	}
	
	
	public void cal2() {
		while(true) {
			String str;
			str = sc.nextLine();

			StringTokenizer st = new StringTokenizer(str, "\\+|\\-|\\*|\\/", true);

			String temp = st.nextToken();
			
			boolean IntOrNot = judgeNumOrOp(temp);
			
			// StringBuffer가 비어있는 경우
			if (sb.isEmpty()) {
				if (judgeCal(IntOrNot)) {
					setResult(0);
					int a = Integer.parseInt(temp);
					// a는 int형식으로 저장
					setA(a);

					// StringBuffer에 String형식으로 저장
					sb.append(temp);
					setSum(getSum() + a);
					setResult(getResult() + a);
				} else {
					System.out.println("숫자를 입력하세요!");
					continue;
				}
			}
			
			// StringBuffer가 비어있지 않은 경우
			else {
				// 첫번째 문자가 숫자일경우 그대로 연산 진행
				// 숫자인경우(int)
				if (judgeCal(IntOrNot)) {
					int a = Integer.parseInt(temp);
					// a는 int형식으로 저장
					setA(a);

					// StringBuffer에 String형식으로 저장
					sb.append(temp);
					calculate();
					
					System.out.println(sb.toString());
					System.out.println(getResult());
					sb.setLength(0);
					setResult(0);
					break;
				}

				// 첫번째 문자가 기호일 경우
				else if (!judgeCal(IntOrNot)) {
					String judgedOp = String.valueOf(judgeOp(temp));
					// judgedOp를 상위생성자에 넣어서 보내준다.
					setOp(judgedOp);
					
					// judgedOp를 Is_A_Cal의 StringBuffer에 넣어준다.
					sb.append(judgedOp);	
				}
			}
			
			
			
		}
	}
}
